substitutions:
  nombre_dispositivo: medidor-co2-prueba1

  # niveles maximos por tipo de lectura
  # por arriba del nivel malo se considera muy malo
  nivel_bueno: "700.0"     # recomendado: 700
  nivel_regular: "1000.0"   # recomendado: 1000
  nivel_malo: "2000.0"     # recomendado: 2000

  # cada cuando se actualiza la medici√≥n del sensor de CO2
  tiempo_actualizacion: 5s

  # tiempo que se deja presionado el boton de calibrar para iniciar el proceso
  tiempo_boton_calibrar: 10s

  # cuanto tiempo se debe dejar al aire libre para hacer la calibracion
  # la hoja de datos del MH-Z19C indica 20 minutos
  tiempo_calibracion: 20min #20min

  # Ejecutar el proceso de autocalibracion. Revisar su uso en la hoja de datos
  #   si el medidor va a estar en funcionamiento continuo (no se apaga nunca)
  #   en interiores de casas, oficinas, etc se puede habilitar
  autocalibracion: "false"

  
  # configuacion Wifi local y el portal cautivo (primera conexion)
  # si se usa archivo de secretos sustituir por esas variables
  ssid: "gdm" #!secret gdm_password
  ssid_password: "" #!secret gdm_password
  ap_password: "" #!secret default_password
    


# Configuracion del MCU
esphome:
  name: $nombre_dispositivo
  platform: ESP8266
  board: nodemcuv2


# Habilitar logging pero restringir las de las luces
logger:
  logs:
    light: ERROR


# Haboilitar Home Assistant API
api:
  password: ""
  services:
    - service: mhz19_calibrate_zero
      then:
        - mhz19.calibrate_zero: mhz19_1
        - delay: 60s


ota:
  password: ""


wifi:
  ssid: $ssid
  password: $ssid_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  # Habilitar el hotspot (portal cautivo) en caso de que la conexion wifi falle
  ap:
    ssid: $nombre_dispositivo
    password: $ap_password 


web_server:
  port: 80


captive_portal:


# Hardware del medidor de CO2

# bandera de estado de calibracion
globals:
  - id: calibrando
    type: bool
    restore_value: no
    initial_value: 'false'

# configuracion de luces
light:
  - platform: binary
    id: led_bueno
    internal: true
    output: led_verde
    effects:
      - strobe:

  - platform: binary
    id: led_regular
    internal: true
    output: led_amarillo
    effects:
      - strobe:

  - platform: binary
    id: led_malo
    internal: true
    output: led_rojo
    effects:
      - strobe:

  - platform: binary
    id: led_status
    internal: true
    output: led_azul
    effects:
      - strobe:


# configuracion del hardware de conexiones de LEDs al MCU
output:
  - platform: gpio
    pin: D5
    id: led_verde

  - platform: gpio
    pin: D6
    id: led_amarillo

  - platform: gpio
    pin: D7
    id: led_rojo

  - platform: gpio
    pin: D8
    id: led_azul


# configuracion del boton de calibracion
binary_sensor:
  - platform: gpio
    name: "Boton Calibrar"
    id: boton_calibrar
    pin: 
      number: D1
      mode: INPUT_PULLUP
    filters:
      - invert:
      - delayed_on: $tiempo_boton_calibrar
    on_press:
      then:
        - logger.log: "Iniciando calibracion"
        - lambda: |- 
            id(calibrando) = true;
        - light.turn_on:
            id: led_status
            effect: strobe
        - light.turn_on:
            id: led_bueno
            effect: strobe
        - light.turn_on:
            id: led_regular
            effect: strobe
        - light.turn_on:
            id: led_malo
            effect: strobe
        - delay: $tiempo_calibracion
        - light.turn_off:
            id: led_status
        - light.turn_off:
            id: led_bueno
        - light.turn_off:
            id: led_regular
        - light.turn_off:
            id: led_malo
        - mhz19.calibrate_zero: mhz19_1
        - lambda: |- 
            id(calibrando) = false;
        - logger.log: "Terminando calibracion"


## Sensor de CO2
uart:
  rx_pin: D2
  tx_pin: D3
  baud_rate: 9600

sensor:
  - platform: mhz19
    id: mhz19_1
    update_interval: $tiempo_actualizacion
    automatic_baseline_calibration: $autocalibracion
    co2:
      id: co2sensor
      name: "MH-Z19 CO2 Value"
      on_value:
        - if:
            condition:
              lambda: 'return !id(calibrando) && x < $nivel_bueno;'
            then:
              - light.turn_on: led_bueno
              - light.turn_off: led_regular
              - light.turn_off: led_malo
        - if:
            condition:
              lambda: 'return !id(calibrando) && (x >= $nivel_bueno) && (x < $nivel_regular);'
            then:
              - light.turn_off: led_bueno
              - light.turn_on: led_regular
              - light.turn_off: led_malo
        - if:
            condition:
              lambda: 'return !id(calibrando) && (x >= $nivel_regular) && (x < $nivel_malo);'
            then:
              - light.turn_off: led_bueno
              - light.turn_off: led_regular
              - light.turn_off: led_malo
              - light.turn_on: led_malo
        - if:
            condition:
              lambda: 'return !id(calibrando) && x >= $nivel_malo;'
            then:
              - light.turn_off: led_bueno
              - light.turn_off: led_regular
              - light.turn_off: led_malo
              - light.turn_on: 
                  id: led_malo
                  effect: strobe

